{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["var $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = null){\n        this.board = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.board = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"playing\";\n        this.addRandomTile();\n        this.addRandomTile();\n    }\n    restart() {\n        this.start();\n    }\n    addRandomTile() {\n        const emptyCells = [];\n        for(let rowIndex = 0; rowIndex < 4; rowIndex++){\n            for(let colIndex = 0; colIndex < 4; colIndex++)if (this.board[rowIndex][colIndex] === 0) emptyCells.push([\n                rowIndex,\n                colIndex\n            ]);\n        }\n        const [randomRow, randomCol] = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.board[randomRow][randomCol] = Math.random() > 0.1 ? 2 : 4;\n    }\n    moveLeft() {\n        let moved = false;\n        for(let rowIndex = 0; rowIndex < 4; rowIndex++){\n            const newRow = this.board[rowIndex].filter((value)=>value !== 0);\n            const mergedRow = [];\n            let i = 0;\n            while(i < newRow.length)if (newRow[i] === newRow[i + 1]) {\n                mergedRow.push(newRow[i] * 2);\n                this.score += newRow[i] * 2;\n                i += 2;\n            } else {\n                mergedRow.push(newRow[i]);\n                i++;\n            }\n            while(mergedRow.length < 4)mergedRow.push(0);\n            if (!this.arraysEqual(this.board[rowIndex], mergedRow)) moved = true;\n            this.board[rowIndex] = mergedRow;\n        }\n        if (moved) {\n            this.addRandomTile();\n            this.checkWin();\n            this.checkLose();\n        }\n    }\n    arraysEqual(arr1, arr2) {\n        return arr1.every((value, index)=>value === arr2[index]);\n    }\n    moveRight() {\n        this.board.forEach((row)=>row.reverse());\n        this.moveLeft();\n        this.board.forEach((row)=>row.reverse());\n    }\n    moveUp() {\n        this.board = this.transposeBoard();\n        this.moveLeft();\n        this.board = this.transposeBoard();\n    }\n    moveDown() {\n        this.board = this.transposeBoard();\n        this.moveRight();\n        this.board = this.transposeBoard();\n    }\n    transposeBoard() {\n        // eslint-disable-next-line\n        return this.board[0].map((_, colIndex)=>this.board.map((row)=>row[colIndex]));\n    }\n    checkWin() {\n        if (this.board.some((row)=>row.includes(2048))) this.status = \"win\";\n    }\n    checkLose() {\n        if (!this.canMove()) this.status = \"lose\";\n    }\n    canMove() {\n        for(let rowIndex = 0; rowIndex < 4; rowIndex++)for(let colIndex = 0; colIndex < 4; colIndex++){\n            if (this.board[rowIndex][colIndex] === 0) return true;\n            if (rowIndex < 3 && // eslint-disable-next-line\n            this.board[rowIndex][colIndex] === this.board[rowIndex + 1][colIndex]) return true;\n            if (colIndex < 3 && // eslint-disable-next-line\n            this.board[rowIndex][colIndex] === this.board[rowIndex][colIndex + 1]) return true;\n        }\n        return false;\n    }\n    getState() {\n        return {\n            board: this.board,\n            score: this.score,\n            statusGame: this.status\n        };\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$buttonStart = document.querySelector(\".start\");\ndocument.querySelector(\".start\").addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    document.querySelector(\".message-start\").style.display = \"none\";\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    $09e991522ca7e64e$var$updateGameDisplay();\n    $09e991522ca7e64e$var$buttonStart.classList.remove(\"start\");\n    $09e991522ca7e64e$var$buttonStart.classList.add(\"restart\");\n    $09e991522ca7e64e$var$buttonStart.textContent = \"Restart\";\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    if ($09e991522ca7e64e$var$game.status !== \"playing\") return;\n    switch(e.key){\n        case \"ArrowLeft\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            e.preventDefault();\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$updateGameDisplay();\n});\nfunction $09e991522ca7e64e$var$updateGameDisplay() {\n    const { board: board, score: score, statusGame: statusGame } = $09e991522ca7e64e$var$game.getState();\n    const fieldCells = document.querySelectorAll(\".field-cell\");\n    fieldCells.forEach((cell, index)=>{\n        const row = Math.floor(index / 4);\n        const col = index % 4;\n        const value = board[row][col];\n        const oldClass = [\n            ...cell.classList\n        ].find((className)=>className.startsWith(\"field-cell--\"));\n        if (oldClass) cell.classList.remove(oldClass);\n        // eslint-disable-next-line\n        cell.textContent = value ? value : \"\";\n        if (value) cell.classList.add(`field-cell--${value}`);\n    });\n    document.querySelector(\".game-score\").textContent = score;\n    if (statusGame === \"win\") document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    else if (statusGame === \"lose\") document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    else document.querySelector(\".message-start\").classList.remove(\"hidden\");\n}\n\n\n//# sourceMappingURL=index.e1158061.js.map\n","const Game = require('../modules/Game.class');\nconst game = new Game();\nconst buttonStart = document.querySelector('.start');\n\ndocument.querySelector('.start').addEventListener('click', () => {\n  game.start();\n  document.querySelector('.message-start').style.display = 'none';\n  document.querySelector('.message-lose').classList.add('hidden');\n  updateGameDisplay();\n\n  buttonStart.classList.remove('start');\n  buttonStart.classList.add('restart');\n  buttonStart.textContent = 'Restart';\n});\n\ndocument.addEventListener('keydown', (e) => {\n  if (game.status !== 'playing') {\n    return;\n  }\n\n  switch (e.key) {\n    case 'ArrowLeft':\n      e.preventDefault();\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      e.preventDefault();\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      e.preventDefault();\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      e.preventDefault();\n      game.moveDown();\n      break;\n  }\n\n  updateGameDisplay();\n});\n\nfunction updateGameDisplay() {\n  const { board, score, statusGame } = game.getState();\n\n  const fieldCells = document.querySelectorAll('.field-cell');\n\n  fieldCells.forEach((cell, index) => {\n    const row = Math.floor(index / 4);\n    const col = index % 4;\n    const value = board[row][col];\n\n    const oldClass = [...cell.classList].find(\n      (className) => className.startsWith('field-cell--'),\n      // eslint-disable-next-line\n  );\n\n    if (oldClass) {\n      cell.classList.remove(oldClass);\n    }\n\n    // eslint-disable-next-line\n    cell.textContent = value ? value : '';\n\n    if (value) {\n      cell.classList.add(`field-cell--${value}`);\n    }\n  });\n\n  document.querySelector('.game-score').textContent = score;\n\n  if (statusGame === 'win') {\n    document.querySelector('.message-win').classList.remove('hidden');\n  } else if (statusGame === 'lose') {\n    document.querySelector('.message-lose').classList.remove('hidden');\n  } else {\n    document.querySelector('.message-start').classList.remove('hidden');\n  }\n}\n","\"use strict\";\n\nclass Game {\n  constructor(initialState = null) {\n    this.board = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.status = \"idle\";\n    this.score = 0;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = \"playing\";\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  restart() {\n    this.start();\n  }\n\n  addRandomTile() {\n    const emptyCells = [];\n\n    for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n      for (let colIndex = 0; colIndex < 4; colIndex++) {\n        if (this.board[rowIndex][colIndex] === 0) {\n          emptyCells.push([rowIndex, colIndex]);\n        }\n      }\n    }\n\n    const [randomRow, randomCol] =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[randomRow][randomCol] = Math.random() > 0.1 ? 2 : 4;\n  }\n\n  moveLeft() {\n    let moved = false;\n\n    for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n      const newRow = this.board[rowIndex].filter((value) => value !== 0);\n      const mergedRow = [];\n      let i = 0;\n\n      while (i < newRow.length) {\n        if (newRow[i] === newRow[i + 1]) {\n          mergedRow.push(newRow[i] * 2);\n          this.score += newRow[i] * 2;\n          i += 2;\n        } else {\n          mergedRow.push(newRow[i]);\n          i++;\n        }\n      }\n\n      while (mergedRow.length < 4) {\n        mergedRow.push(0);\n      }\n\n      if (!this.arraysEqual(this.board[rowIndex], mergedRow)) {\n        moved = true;\n      }\n\n      this.board[rowIndex] = mergedRow;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkWin();\n      this.checkLose();\n    }\n  }\n\n  arraysEqual(arr1, arr2) {\n    return arr1.every((value, index) => value === arr2[index]);\n  }\n\n  moveRight() {\n    this.board.forEach((row) => row.reverse());\n    this.moveLeft();\n    this.board.forEach((row) => row.reverse());\n  }\n\n  moveUp() {\n    this.board = this.transposeBoard();\n    this.moveLeft();\n    this.board = this.transposeBoard();\n  }\n\n  moveDown() {\n    this.board = this.transposeBoard();\n    this.moveRight();\n    this.board = this.transposeBoard();\n  }\n\n  transposeBoard() {\n    // eslint-disable-next-line\n    return this.board[0].map((_, colIndex) =>\n      this.board.map((row) => row[colIndex]),\n    );\n  }\n\n  checkWin() {\n    if (this.board.some((row) => row.includes(2048))) {\n      this.status = \"win\";\n    }\n  }\n\n  checkLose() {\n    if (!this.canMove()) {\n      this.status = \"lose\";\n    }\n  }\n\n  canMove() {\n    for (let rowIndex = 0; rowIndex < 4; rowIndex++) {\n      for (let colIndex = 0; colIndex < 4; colIndex++) {\n        if (this.board[rowIndex][colIndex] === 0) {\n          return true;\n        }\n\n        if (\n          rowIndex < 3 &&\n          // eslint-disable-next-line\n          this.board[rowIndex][colIndex] === this.board[rowIndex + 1][colIndex]\n        ) {\n          return true;\n        }\n\n        if (\n          colIndex < 3 &&\n          // eslint-disable-next-line\n          this.board[rowIndex][colIndex] === this.board[rowIndex][colIndex + 1]\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  getState() {\n    return {\n      board: this.board,\n      score: this.score,\n      statusGame: this.status,\n    };\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","board","status","score","getScore","getStatus","start","addRandomTile","restart","emptyCells","rowIndex","colIndex","push","randomRow","randomCol","Math","floor","random","length","moveLeft","moved","newRow","filter","value","mergedRow","i","arraysEqual","checkWin","checkLose","arr1","arr2","every","index","moveRight","forEach","row","reverse","moveUp","transposeBoard","moveDown","map","_","some","includes","canMove","getState","statusGame","$09e991522ca7e64e$var$buttonStart","document","querySelector","$09e991522ca7e64e$var$updateGameDisplay","fieldCells","querySelectorAll","cell","oldClass","classList","find","className","startsWith","remove","textContent","add","addEventListener","style","display","e","key","preventDefault"],"version":3,"file":"index.e1158061.js.map"}